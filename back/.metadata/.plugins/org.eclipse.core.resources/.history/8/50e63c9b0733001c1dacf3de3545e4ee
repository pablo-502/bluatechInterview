package com.exam.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.exam.dto.Usuario;
import com.exam.repository.UsuarioRepository;

@CrossOrigin(origins = "http://localhost:8081")
@RestController
@RequestMapping("/api")
public class UsuarioController {

	@Autowired
	UsuarioRepository usuarioRepository;

	@GetMapping("/usuario")
	public ResponseEntity<List<Usuario>> getAllUsuarios(@RequestParam(required = false) String id) {
		try {
			List<Usuario> usuarios = new ArrayList<Usuario>();
			
			if(id == null) {
				usuarioRepository.findAll().forEach(usuarios::add);
			} else {
				usuarioRepository.findByIdUser(id).forEach(usuarios::add);
			}
			
			if(usuarios.isEmpty()) {
				return new ResponseEntity<>(HttpStatus.NO_CONTENT);
			}
			
			return new ResponseEntity<>(usuarios, HttpStatus.OK);
			
		} catch (Exception e) {
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@GetMapping("/usuario/{email}")
	public ResponseEntity<Usuario> findByEmailContaining(@PathVariable("email") String email) {
		List<Usuario> usuarioData = new ArrayList<Usuario>();
		
		if(email == null) {
			usuarioRepository.findAll().forEach(usuarioData::add);
		} else {
			usuarioRepository.findByIdUser(email).forEach(usuarioData::add);
		}
		
		if(usuarioData.isEmpty()) {
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		}
		
		return new ResponseEntity<>(usuarioData, HttpStatus.OK);
	}

	@PostMapping("/usuario/registro")
	public ResponseEntity<Usuario> createUsuario(@RequestBody Usuario usuario) {
		try {
			Usuario _usuario = usuarioRepository.save(new Usuario(usuario.getId(), usuario.getNombre(),
					usuario.getApellido(), usuario.getEdad(), usuario.getPuesto(), usuario.getEmail()));
			return new ResponseEntity<>(_usuario, HttpStatus.CREATED);
		} catch (Exception e) {
			return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@PutMapping("/usuario/{id}")
	public ResponseEntity<Usuario> updateUsuario(@PathVariable("id") String id, @RequestBody Usuario usuario) {

	}

	@DeleteMapping("/usuario/{id}")
	public ResponseEntity<HttpStatus> deleteUsuario(@PathVariable("id") String id) {

	}

}
